{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/home/tysonic/Projects/zuku_mobile/node_modules/react-native-super-grid/SectionGrid.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { forwardRef, memo, useCallback, useMemo, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport PropTypes from 'prop-types';\nimport { generateStyles, calculateDimensions, chunkArray } from \"./utils\";\nvar SectionGrid = memo(forwardRef(function (props, ref) {\n  var sections = props.sections,\n      style = props.style,\n      spacing = props.spacing,\n      fixed = props.fixed,\n      itemDimension = props.itemDimension,\n      staticDimension = props.staticDimension,\n      maxDimension = props.maxDimension,\n      originalRenderItem = props.renderItem,\n      keyExtractor = props.keyExtractor,\n      onLayout = props.onLayout,\n      itemContainerStyle = props.itemContainerStyle,\n      restProps = _objectWithoutProperties(props, [\"sections\", \"style\", \"spacing\", \"fixed\", \"itemDimension\", \"staticDimension\", \"maxDimension\", \"renderItem\", \"keyExtractor\", \"onLayout\", \"itemContainerStyle\"]);\n\n  var _useState = useState(function () {\n    var defaultTotalDimension = staticDimension;\n\n    if (!staticDimension) {\n      defaultTotalDimension = maxDimension || Dimensions.get('window').width;\n    }\n\n    return defaultTotalDimension;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      totalDimension = _useState2[0],\n      setTotalDimension = _useState2[1];\n\n  var onLocalLayout = useCallback(function (e) {\n    if (!staticDimension) {\n      var _ref = e.nativeEvent.layout || {},\n          newTotalDimension = _ref.width;\n\n      if (maxDimension && newTotalDimension > maxDimension) {\n        newTotalDimension = maxDimension;\n      }\n\n      if (totalDimension !== newTotalDimension) {\n        setTotalDimension(newTotalDimension);\n      }\n    }\n\n    if (onLayout) {\n      onLayout(e);\n    }\n  }, [staticDimension, maxDimension, totalDimension, onLayout]);\n  var renderRow = useCallback(function (_ref2) {\n    var renderItem = _ref2.renderItem,\n        rowItems = _ref2.rowItems,\n        rowIndex = _ref2.rowIndex,\n        section = _ref2.section,\n        itemsPerRow = _ref2.itemsPerRow,\n        rowStyle = _ref2.rowStyle,\n        separators = _ref2.separators,\n        isFirstRow = _ref2.isFirstRow,\n        containerStyle = _ref2.containerStyle;\n    var additionalRowStyle = {};\n\n    if (isFirstRow) {\n      additionalRowStyle = {\n        marginTop: spacing\n      };\n    }\n\n    return React.createElement(View, {\n      style: [rowStyle, additionalRowStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, rowItems.map(function (item, i) {\n      return React.createElement(View, {\n        key: keyExtractor ? keyExtractor(item, i) : \"item_\" + (rowIndex * itemsPerRow + i),\n        style: [containerStyle, itemContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }\n      }, renderItem({\n        item: item,\n        index: rowIndex * itemsPerRow + i,\n        section: section,\n        separators: separators,\n        rowIndex: rowIndex\n      }));\n    }));\n  }, [spacing, keyExtractor, itemContainerStyle]);\n\n  var _useMemo = useMemo(function () {\n    return calculateDimensions({\n      itemDimension: itemDimension,\n      staticDimension: staticDimension,\n      totalDimension: totalDimension,\n      spacing: spacing,\n      fixed: fixed\n    });\n  }, [itemDimension, staticDimension, totalDimension, spacing, fixed]),\n      containerDimension = _useMemo.containerDimension,\n      itemsPerRow = _useMemo.itemsPerRow,\n      fixedSpacing = _useMemo.fixedSpacing;\n\n  var _useMemo2 = useMemo(function () {\n    return generateStyles({\n      itemDimension: itemDimension,\n      containerDimension: containerDimension,\n      spacing: spacing,\n      fixedSpacing: fixedSpacing,\n      fixed: fixed\n    });\n  }, [itemDimension, containerDimension, spacing, fixedSpacing, fixed]),\n      containerStyle = _useMemo2.containerStyle,\n      rowStyle = _useMemo2.rowStyle;\n\n  var groupSectionsFunc = useCallback(function (section) {\n    var chunkedData = chunkArray(section.data, itemsPerRow);\n\n    var _renderItem = section.renderItem || originalRenderItem;\n\n    return _objectSpread(_objectSpread({}, section), {}, {\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item,\n            index = _ref3.index,\n            section = _ref3.section;\n        return renderRow({\n          renderItem: _renderItem,\n          rowItems: item,\n          rowIndex: index,\n          section: section,\n          isFirstRow: index === 0,\n          itemsPerRow: itemsPerRow,\n          rowStyle: rowStyle,\n          containerStyle: containerStyle\n        });\n      },\n      data: chunkedData,\n      originalData: section.data\n    });\n  }, [itemsPerRow, originalRenderItem, renderRow, rowStyle, containerStyle]);\n  var groupedSections = sections.map(groupSectionsFunc);\n  var localKeyExtractor = useCallback(function (rowItems, index) {\n    if (keyExtractor) {\n      return rowItems.map(function (rowItem, rowItemIndex) {\n        return keyExtractor(rowItem, rowItemIndex);\n      }).join('_');\n    }\n\n    return \"row_\" + index;\n  }, [keyExtractor]);\n  return React.createElement(SectionList, _extends({\n    onLayout: onLocalLayout,\n    extraData: totalDimension,\n    sections: groupedSections,\n    keyExtractor: localKeyExtractor,\n    style: style,\n    ref: ref\n  }, restProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }));\n}));\nSectionGrid.displayName = 'SectionGrid';\nSectionGrid.propTypes = {\n  renderItem: PropTypes.func,\n  sections: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: PropTypes.object,\n  itemContainerStyle: PropTypes.object,\n  staticDimension: PropTypes.number,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string\n};\nSectionGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  onLayout: null,\n  listKey: undefined\n};\nexport default SectionGrid;","map":{"version":3,"sources":["/home/tysonic/Projects/zuku_mobile/node_modules/react-native-super-grid/SectionGrid.js"],"names":["React","forwardRef","memo","useCallback","useMemo","useState","PropTypes","generateStyles","calculateDimensions","chunkArray","SectionGrid","props","ref","sections","style","spacing","fixed","itemDimension","staticDimension","maxDimension","originalRenderItem","renderItem","keyExtractor","onLayout","itemContainerStyle","restProps","defaultTotalDimension","Dimensions","get","width","totalDimension","setTotalDimension","onLocalLayout","e","nativeEvent","layout","newTotalDimension","renderRow","rowItems","rowIndex","section","itemsPerRow","rowStyle","separators","isFirstRow","containerStyle","additionalRowStyle","marginTop","map","item","i","index","containerDimension","fixedSpacing","groupSectionsFunc","chunkedData","data","originalData","groupedSections","localKeyExtractor","rowItem","rowItemIndex","join","displayName","propTypes","func","arrayOf","any","isRequired","number","bool","object","listKey","string","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, {\n  forwardRef, memo, useCallback, useMemo, useState,\n} from 'react';\nimport {\n  View, Dimensions, SectionList,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport { generateStyles, calculateDimensions, chunkArray } from './utils';\n\n\nconst SectionGrid = memo(\n  forwardRef((props, ref) => {\n    const {\n      sections,\n      style,\n      spacing,\n      fixed,\n      itemDimension,\n      staticDimension,\n      maxDimension,\n      renderItem: originalRenderItem,\n      keyExtractor,\n      onLayout,\n      itemContainerStyle,\n      ...restProps\n    } = props;\n\n    const [totalDimension, setTotalDimension] = useState(() => {\n      let defaultTotalDimension = staticDimension;\n\n      if (!staticDimension) {\n        defaultTotalDimension = maxDimension || Dimensions.get('window').width;\n      }\n\n      return defaultTotalDimension;\n    });\n\n    const onLocalLayout = useCallback(\n      (e) => {\n        if (!staticDimension) {\n          let { width: newTotalDimension } = e.nativeEvent.layout || {};\n\n          if (maxDimension && newTotalDimension > maxDimension) {\n            newTotalDimension = maxDimension;\n          }\n\n          if (totalDimension !== newTotalDimension) {\n            setTotalDimension(newTotalDimension);\n          }\n        }\n\n        // call onLayout prop if passed\n        if (onLayout) {\n          onLayout(e);\n        }\n      },\n      [staticDimension, maxDimension, totalDimension, onLayout],\n    );\n\n    const renderRow = useCallback(\n      ({\n        renderItem,\n        rowItems,\n        rowIndex,\n        section,\n        itemsPerRow,\n        rowStyle,\n        separators,\n        isFirstRow,\n        containerStyle,\n      }) => {\n        // Add spacing below section header\n        let additionalRowStyle = {};\n        if (isFirstRow) {\n          additionalRowStyle = {\n            marginTop: spacing,\n          };\n        }\n\n        return (\n          <View style={[rowStyle, additionalRowStyle]}>\n            {rowItems.map((item, i) => (\n              <View\n                key={\n                  keyExtractor\n                    ? keyExtractor(item, i)\n                    : `item_${rowIndex * itemsPerRow + i}`\n                }\n                style={[containerStyle, itemContainerStyle]}\n              >\n                {renderItem({\n                  item,\n                  index: rowIndex * itemsPerRow + i,\n                  section,\n                  separators,\n                  rowIndex,\n                })}\n              </View>\n            ))}\n          </View>\n        );\n      },\n      [spacing, keyExtractor, itemContainerStyle],\n    );\n\n    const { containerDimension, itemsPerRow, fixedSpacing } = useMemo(\n      () => calculateDimensions({\n        itemDimension,\n        staticDimension,\n        totalDimension,\n        spacing,\n        fixed,\n      }),\n      [itemDimension, staticDimension, totalDimension, spacing, fixed],\n    );\n\n    const { containerStyle, rowStyle } = useMemo(\n      () => generateStyles({\n        itemDimension,\n        containerDimension,\n        spacing,\n        fixedSpacing,\n        fixed,\n      }),\n      [itemDimension, containerDimension, spacing, fixedSpacing, fixed],\n    );\n\n    const groupSectionsFunc = useCallback(\n      (section) => {\n        const chunkedData = chunkArray(section.data, itemsPerRow);\n        const renderItem = section.renderItem || originalRenderItem;\n\n        return {\n          ...section,\n          renderItem: ({ item, index, section }) => renderRow({\n            renderItem,\n            rowItems: item,\n            rowIndex: index,\n            section,\n            isFirstRow: index === 0,\n            itemsPerRow,\n            rowStyle,\n            containerStyle,\n          }),\n          data: chunkedData,\n          originalData: section.data,\n        };\n      },\n      [\n        itemsPerRow,\n        originalRenderItem,\n        renderRow,\n        rowStyle,\n        containerStyle,\n      ],\n    );\n\n    const groupedSections = sections.map(groupSectionsFunc);\n\n    const localKeyExtractor = useCallback(\n      (rowItems, index) => {\n        if (keyExtractor) {\n          return rowItems\n            .map((rowItem, rowItemIndex) => keyExtractor(rowItem, rowItemIndex))\n            .join('_');\n        }\n        return `row_${index}`;\n      },\n      [keyExtractor],\n    );\n\n    return (\n      <SectionList\n        onLayout={onLocalLayout}\n        extraData={totalDimension}\n        sections={groupedSections}\n        keyExtractor={localKeyExtractor}\n        style={style}\n        ref={ref}\n        {...restProps}\n      />\n    );\n  }),\n);\n\n\nSectionGrid.displayName = 'SectionGrid';\n\nSectionGrid.propTypes = {\n  renderItem: PropTypes.func,\n  sections: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: PropTypes.object,\n  itemContainerStyle: PropTypes.object,\n  staticDimension: PropTypes.number,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string,\n};\n\nSectionGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  onLayout: null,\n  listKey: undefined,\n};\n\n\nexport default SectionGrid;\n"]},"metadata":{},"sourceType":"module"}